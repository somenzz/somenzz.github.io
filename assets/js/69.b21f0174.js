(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{647:function(s,a,t){"use strict";t.r(a);var n=t(7),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("我相信，你在 Vim 中输入中文时，一定有过很痛苦的经历：在切换为命令模式时，需要切换为英文输入法，然后在插入模式时，再切换为中文，这两次切换，让原本高效的 Vim 显得笨拙无比，这个麻烦，劝退了很多 Vim 初学者。")]),s._v(" "),t("p",[s._v("现在，这个麻烦不存在了，因为这里有一个方法，可以让 Vim 退出插入模式的时候自动切换为英文输入法，再回到插入模式时自动恢复为原来的输入法。 Windows 或 MacOS 都可以实现。现在，只要是涉及文本编辑的，我都用 Vim，输入中文再也不麻烦了，甚至是一种享受。")]),s._v(" "),t("p",[s._v("以下是具体的方法：")]),s._v(" "),t("h3",{attrs:{id:"windows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[s._v("#")]),s._v(" Windows")]),s._v(" "),t("p",[s._v("如果你用的是 Windows，我假设你用的是 gVim，因为 Windows 的 cmd 实在太糟糕，用 Vim 不方便也不美观。")]),s._v(" "),t("p",[s._v("Vim 本身有这方面的设置，你可以查看帮助文档，Vim 命令模式下输入 "),t("code",[s._v(":help iminsert")]),s._v(" 查看详情。")]),s._v(" "),t("p",[s._v("具体解决方法：")]),s._v(" "),t("p",[s._v("在命令模式中输入 "),t("code",[s._v(":edit $VIM/_vimrc")]),s._v("，在代码最后添加以下代码：")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("has")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'multi_byte_ime'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  \n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('"未开启 IME 时光标背景色  ')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hi")]),s._v(" Cursor guifg"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bg")]),s._v(" guibg"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Orange gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NONE  \n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('"开启IME 时光标背景色  ')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("hi")]),s._v(" CursorIM guifg"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NONE guibg"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("Skyblue gui"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("NONE  \n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('"关闭Vim的自动切换 IME 输入法(插入模式和检索模式)  ')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("iminsert")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("imsearch")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  \n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('"插入模式输入法状态未被记录时，默认关闭IME  ')]),s._v("\n "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('"inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>  ')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("endif")]),s._v("  \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("注意，vim 配置语法中，双引号后面的内容为注释。 上述配置在本人的 Windows 上电脑亲测有效。")]),s._v(" "),t("p",[s._v("如果无效，你还可以试下"),t("a",{attrs:{href:"https://www.zhihu.com/question/341748857/answer/796039634",target:"_blank",rel:"noopener noreferrer"}},[s._v("网上的方法"),t("OutboundLink")],1),s._v("：")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("has")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'gui_running'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("imactivatekey")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("C"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("space  \n  inoremap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ESC"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ESC"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("iminsert")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("CR"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("endif")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"macos"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#macos"}},[s._v("#")]),s._v(" MacOS")]),s._v(" "),t("p",[s._v("MacOS 自带 Vim，与 gVim 不同，Vim 则需要借助于 smartim 插件来实现，smartim 依赖 im-select 程序，不过在安装 smartim 时会自动安装 im-select。")]),s._v(" "),t("p",[s._v("smartim 插件依靠 Vim 的 autocmd 机制，就是进入命令模式时先把正在使用的输入法保存起来，然后切换到默认的输入法，进入插入模式时再切换为之前的输入法：")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[s._v("augroup smartim\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" VimLeavePre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" InsertLeave "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" InsertEnter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectSaved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\naugroup end\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("以下是具体的安装步骤：")]),s._v(" "),t("p",[s._v("1、先安装 Vim 的插件管理器 Vundle")]),s._v(" "),t("p",[s._v("你可以不安装 Vundle，然后手动安装 smartim，不过不推荐你这样做，原因将文件复制到指定的目录是件麻烦事，而且后面你可能需要更多好用的插件。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("2、配置 Vundle，添加 smartim 插件。")]),s._v(" "),t("p",[s._v("打开 Vim，命令模式下输入 "),t("code",[s._v(":edit $MYVIMRC")]),s._v(" 编辑 ～/.vimrc 文件，在文件的最开始处添加以下代码：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" nocompatible              "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" be iMproved, required\nfiletype off                  "')]),s._v(" required\n\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n"')]),s._v(" alternatively, pass a path where Vundle should "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" plugins\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"call vundle#begin('~/some/path/here')\n\n\"")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" Vundle manage Vundle, required\nPlugin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'VundleVim/Vundle.vim'")]),s._v("\nPlugin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ybian/smartim'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" All of your Plugins must be added before the following line\ncall vundle#end()            "')]),s._v(" required\nfiletype plugin indent on    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" required\n"')]),s._v(" To ignore plugin indent changes, instead use:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"filetype plugin on\n"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Brief help\n"')]),s._v(" :PluginList       - lists configured plugins\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" :PluginInstall    - installs plugins; append '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(' to update or just :PluginUpdate\n"')]),s._v(" :PluginSearch foo - searches "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" foo"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" append "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" to refresh "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" cache\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" :PluginClean      - confirms removal of unused plugins; append '),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(' to auto-approve removal\n"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" see :h vundle for more details or wiki for FAQ\n"')]),s._v(" Put your non-Plugin stuff after this line\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("上述代码中已经加入了 smartim 插件："),t("code",[s._v("Plugin 'ybian/smartim'")]),s._v("。")]),s._v(" "),t("p",[s._v("保存退出 Vim，然后重新打开，配置文件就生效了，这时在命令模式下输入"),t("code",[s._v(":PluginInstall")]),s._v(" 等待 smartim 插件完成安装。")]),s._v(" "),t("p",[s._v("安装完成之后，你就可以自由愉快的在插入模式下输入中文，然后一个 ESC 就可以自动切换为英文输入法了。")]),s._v(" "),t("p",[s._v("如果没有生效，请往下看。")]),s._v(" "),t("h4",{attrs:{id:"修改-smartim-命令模式默认的输入法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改-smartim-命令模式默认的输入法"}},[s._v("#")]),s._v(" 修改 smartim 命令模式默认的输入法")]),s._v(" "),t("p",[s._v("我当时这一步做完还不行，因为我的 Mac 英文输入法是 com.apple.keylayout.ABC，手动切换到英文输入法，然后使用 "),t("code",[s._v("im-select")]),s._v(" 查看：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("❯ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/Users/aaron/.vim/bundle/smartim/plugin\n❯ ./im-select\ncom.apple.keylayout.ABC\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("而 smartim 默认的命令模式输入法是 "),t("code",[s._v("com.apple.keylayout.US")]),s._v("，因此需要在 vimrc 中指定 smartim 的默认输入法：")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" g"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("smartim_default "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'com.apple.keylayout.ABC'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("再试就可以了。")]),s._v(" "),t("h4",{attrs:{id:"修改-smartim-的延迟"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改-smartim-的延迟"}},[s._v("#")]),s._v(" 修改 smartim 的延迟")]),s._v(" "),t("p",[s._v("当你使用的过程中会发现，按下 ESC 之后，短暂的时间内输入法还没有切换为英文，这种卡顿让输入比较快的键盘手无法忍受。")]),s._v(" "),t("p",[s._v("解决方法是在 smartim.vim 文件中添加 "),t("code",[s._v("set timeoutlen=0")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("❯ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("pwd")]),s._v("\n/Users/aaron/.vim/bundle/smartim/plugin\n❯ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\nim-select   smartim.vim\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("在 smartim.vim 文件的最后，添加 "),t("code",[s._v("set timeoutlen=0")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[s._v("augroup smartim\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("timeoutlen")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" VimLeavePre "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" InsertLeave "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectDefault")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("autocmd")]),s._v(" InsertEnter "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("call")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Smartim_SelectSaved")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\naugroup end\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("这样问题解决。不过这会产生一个小问题，就是自定义的快捷键会失效，比如你定义了 jj 表示 ESC")]),s._v(" "),t("div",{staticClass:"language-vim line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-vim"}},[t("code",[s._v("imap jj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Esc"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("因为没有了延迟，当你输入第二个 j 的时候，Vim 不会把它当做组合。不过不用 jj 也罢。")]),s._v(" "),t("p",[s._v("如果很纠结这个，可以在函数  Smartim_SelectDefault() 的第一行添加 "),t("code",[s._v("set timeoutlen=0")]),s._v("\n在函数 Smartim_SelectSaved() 的第一行添加 "),t("code",[s._v("set timeoutlen=500")]),s._v("，不过即使如此，仍会有 500ms 的延迟。")]),s._v(" "),t("h3",{attrs:{id:"最后的话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后的话"}},[s._v("#")]),s._v(" 最后的话")]),s._v(" "),t("p",[s._v("本文分享了 Vim 中文输入的痛点解决办法，亲测可用，Linux 可以参考 MacOS 的做法。这样你就可以在 Vim 中自由自在的输入中文了，是不是很爽？")]),s._v(" "),t("p",[s._v("从此，用 Vim 编程和写文档变成一种享受。")]),s._v(" "),t("p",[s._v("如果觉得有帮助，请点赞、转发，关注公众号「Python七号」，每天学习一个小技术。")]),s._v(" "),t("p",[s._v("有问题可以留言讨论。")])])}),[],!1,null,null,null);a.default=e.exports}}]);