(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{777:function(s,n,t){"use strict";t.r(n);var a=t(7),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("距离上次更新已经有 7 天了，只要停下来一天，就会有第二天，第三天，越是不写，就越不知道写什么。这就是惯性的力量，无论是勤劳还是懒惰，都会产生惯性，于是勤劳者越来越勤劳，懒惰者越来越懒惰，学霸越来越霸，学渣越来越渣。 时间一长，就会觉得自己根本无法改变自己，总会回到我们习以为常的状态。所以，朋友们，一定要警惕惯性，他使我们越来越好，也会使我们越来越坏，这不，我又逼着自己更新了。")]),s._v(" "),t("p",[s._v("之所以停止了更新，一是方面是懒惰的小人击败了勤奋，另一方面是因为时间不够用。下班后就那么点时间，用于这个就不能用于那个，而我又是一个喜欢写代码的人，一旦开始写代码，时间就飞快的流失，从晚上 8 点写到晚上 12 点，也是一眨眼的功夫，明天还要上班，我不可能再熬夜。熬夜会把第二天废掉，得不偿失。最近在学习并尝试 golang 的 Web 开发，已经入门了，从以前 Django 的 MVC 模式，也渐渐的切换到了 Golang 的 DDD 模式，感觉 DDD 更具有面向对象风格，而 MVC 更像是一种面向过程的风格。")]),s._v(" "),t("p",[s._v("今天展开来说，什么是 MVC，什么是 DDD 呢，他们分别适合什么样的应用场景？")]),s._v(" "),t("h3",{attrs:{id:"什么是-mvc、什么是-ddd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mvc、什么是-ddd"}},[s._v("#")]),s._v(" 什么是 MVC、什么是 DDD")]),s._v(" "),t("p",[s._v("MVC 三层架构中的 M 表示 Model，V 表示 View，C 表示 Controller。它将整个项目分为三层：展示层、逻辑层、数据层。熟悉 Django 的朋友可以这么映射，M 就是我们编写的 models.py 表示数据层，定义数据的存储，而 V 就是 views.py，里面存放着大量的业务逻辑，C 就是 urls.py 控制着路由的访问。前端请求首先访问 Controller，然后是 View，最后是 Model，这就是面向数据访问的过程来定义的架构。")]),s._v(" "),t("p",[s._v("MVC 的缺点就是虽然 M 和 V 是两份文件，但是数据和业务逻辑高度耦合的，也就是说，M 只负责了数据的定义，而数据的操作都在 V，一旦修改了 M，改 V 是真是苦不堪言，这种将数据与操作分离的特点，破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。")]),s._v(" "),t("p",[s._v("与之对应，将数据和操作定义在一起，就是 DDD，全称叫领域驱动设计（Domain Driven Design，简称 DDD），领域驱动设计这个概念并不新颖，早在 2004 年就被提出了，不过现在又被大家重视起来，还是基于微服务的兴起，微服务就是大服务拆分称小服务嘛，这样就要做好业务模块划分，自然也就加速了领域驱动设计的盛行。")]),s._v(" "),t("p",[s._v("DDD 开发模式实现的代码，也是按照 MVC 三层架构分层的。Controller 层还是负责暴露 API 接口，M 层还是负责数据存取，V 层负责核心业务逻辑。它跟 MVC 的主要区别还是 M 和 V 的不同。传统的 M 只定义数据数据的结构，不定义数据的操作，而 DDD 开发模式，M 不仅定义数据的结构，还定义数据的操作。")]),s._v(" "),t("p",[s._v("比如 Django 的 M 和 V 可能是这样的：")]),s._v(" "),t("p",[t("strong",[s._v("M")])]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# models.py")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("contrib"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("auth"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("models "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" AbstractUser\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" django"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("db "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" models\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数据模型的定义")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("AbstractUser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n\t数据的定义\n    """')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Meta")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        db_table "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'user'")]),s._v("\n        verbose_name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'用户信息'")]),s._v("\n        verbose_name_plural "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" verbose_name\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("strong",[s._v("M")])]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# views.py")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserViewSet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("viewsets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ModelViewSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n\t数据的操作、增删改查\n    """')]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("Golang 的 "),t("strong",[s._v("M")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-golang line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// User.go\ntype User struct {\n\t//数据的定义\n\t...\n}\n\n//数据的操作、增删改查\nfunc (u *User) BeforeSave() error {\n\t...\n}\n\nfunc (u *User) Prepare() {\n\t...\n}\n\nfunc (u *User) Save(db *gorm.DB) (*User, error) {\n\t...\n}\n\nfunc (u *User) UpdateAUser(db *gorm.DB, uid uint32) (*User, error) {\n\t...\n}\n\nfunc (u *User) DeleteAUser(db *gorm.DB, uid uint32) (int64, error) {\n\t...\n}\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br")])]),t("p",[s._v("Golang 的 "),t("strong",[s._v("V")])]),s._v(" "),t("div",{staticClass:"language-golang line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func (server *Server) DeleteUser(w http.ResponseWriter, r *http.Request) {\n\n\tvars := mux.Vars(r)\n\n\tuser := models.User{}\n\n\tuid, err := strconv.ParseUint(vars["id"], 10, 32)\n\tif err != nil {\n\t\tresponses.ERROR(w, http.StatusBadRequest, err)\n\t\treturn\n\t}\n\ttokenID, err := auth.ExtractTokenID(r)\n\tif err != nil {\n\t\tresponses.ERROR(w, http.StatusUnauthorized, errors.New("Unauthorized"))\n\t\treturn\n\t}\n\tif tokenID != 0 && tokenID != uint32(uid) {\n\t\tresponses.ERROR(w, http.StatusUnauthorized, errors.New(http.StatusText(http.StatusUnauthorized)))\n\t\treturn\n\t}\n\t_, err = user.DeleteAUser(server.DB, uint32(uid))\n\tif err != nil {\n\t\tresponses.ERROR(w, http.StatusInternalServerError, err)\n\t\treturn\n\t}\n\tw.Header().Set("Entity", fmt.Sprintf("%d", uid))\n\tresponses.JSON(w, http.StatusNoContent, "")\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("p",[s._v("里面调用了 "),t("strong",[s._v("M")]),s._v(" 中的 DeleteAUser，以后修改 Model 时，只需要修改函数 DeleteAUser，而不需要修改 "),t("strong",[s._v("V")]),s._v("。")]),s._v(" "),t("p",[s._v("注意，MVC 和 DDD 与编程语言和框架都没有关系，因为正好手边有对应的代码，就拿来用了。")]),s._v(" "),t("h3",{attrs:{id:"mvc-和-ddd-分别适合什么样的场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mvc-和-ddd-分别适合什么样的场景"}},[s._v("#")]),s._v(" MVC 和 DDD 分别适合什么样的场景？")]),s._v(" "),t("p",[s._v("MVC 适合简单的业务，DDD 适合复杂的业务，为什么这么说呢？")]),s._v(" "),t("p",[s._v("如果系统业务比较简单，简单到就是基于 SQL 的 CRUD 操作，那么根本不需要动脑子精心设计 DDD 模型，MVC 模型就足以应付这种简单业务的开发工作。因为业务比较简单，即便我们使用 DDD，那模型本身包含的业务逻辑也并不会很多，设计出来的领域模型也会比较单薄，跟 MVC 差不多，没有太大意义。")]),s._v(" "),t("p",[s._v("你可能会问，DDD 不就是把部分数据的操作放在了模型里面吗，为什么就适合复杂的业务呢？")]),s._v(" "),t("p",[s._v("不夸张地讲，MVC 模式的开发，大部分都是 SQL 驱动（SQL-Driven）的开发模式。我们接到一个后端接口的开发需求的时候，就去看接口需要的数据对应到数据库中，需要哪张表或者哪几张表，然后思考如何编写 SQL 语句来获取数据。之后就是定义 models.py 编写 views.py 中的视图函数，你可以这么理解，views.py 中就是各种 SQL 语句。而 SQL 语句是不能复用的，新接口开发即使有部分相同的逻辑，也只能重新编写视图函数。")]),s._v(" "),t("p",[s._v("而 DDD 开发模式下，我们需要事先理清楚所有的业务，定义领域模型所包含的属性和方法。领域模型相当于可复用的业务中间层。新功能需求的开发，都基于之前定义好的这些领域模型来完成。越复杂的系统，对代码的复用性、易维护性要求就越高，我们就越应该花更多的时间和精力在前期设计上。DDD 开发模式，正好需要我们前期做大量的业务调研、领域模型设计，所以它更加适合这种复杂系统的开发。")]),s._v(" "),t("h2",{attrs:{id:"最后的话"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最后的话"}},[s._v("#")]),s._v(" 最后的话")]),s._v(" "),t("p",[s._v("平时做 Web 开发，基本上，都是使用 MVC 架构，就连 Spring 的官方 Demo 也是 MVC 模式，也就是说 MVC 仍然是主流，因为项目之前就是 MVC 架构，保持不变的成本最小。")]),s._v(" "),t("p",[s._v("但 MVC 是典型的面向过程风格的设计，不适合复杂的系统，比如金融类系统、账务核算系统。DDD 架构把数据和操作封装在一起，对数据的操作可以复用，是面向对象风格的设计，比较适合复杂的业务系统。")]),s._v(" "),t("p",[s._v("一句话，简单的系统，就用 MVC，复杂的系统就用 DDD。")]),s._v(" "),t("p",[s._v("如果用帮助，还请点赞、转发、评论，感谢阅读。")])])}),[],!1,null,null,null);n.default=e.exports}}]);