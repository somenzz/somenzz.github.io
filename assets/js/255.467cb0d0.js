(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{823:function(t,s,a){"use strict";a.r(s);var e=a(7),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("当你熟悉了 Python 之后，就不会再满足只写一个脚本就完事，这个时候就需要考虑项目结构的事情了，尤其与别人合作完成一个项目的时候，项目的结构尤其重要。")]),t._v(" "),a("p",[t._v("本文分享如何优雅的开启一个 Python 项目。")]),t._v(" "),a("p",[t._v("简单来讲，分为 5 个步骤：")]),t._v(" "),a("h2",{attrs:{id:"_1、创建虚拟环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、创建虚拟环境"}},[t._v("#")]),t._v(" 1、创建虚拟环境")]),t._v(" "),a("p",[t._v("你可以在项目目录中执行下面的命令，然后就会生成一个 venv 目录，这就是 Python 的虚拟环境，后面记得把 venv 添加到 .gitignore 文件中，避免被 Git 管理，从而避免上传到 GitHub。")]),t._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("python3 -m venv venv "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#创建")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" venv/bin/activate "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#激活")]),t._v("\ndeactivate "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#取消激活")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("在后面的编码过程中，我们会 pip install 一些依赖，项目依赖全部安装完成后，记得执行 "),a("code",[t._v("pip freeze> requirements.txt")]),t._v(" 来保存项目的依赖，一遍后续迁移或者部署的时候，可以很快安装依赖。")]),t._v(" "),a("h2",{attrs:{id:"_2、建立单独的单元测试目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、建立单独的单元测试目录"}},[t._v("#")]),t._v(" 2、建立单独的单元测试目录")]),t._v(" "),a("p",[t._v("通常，在项目目录下建立 tests 文件夹，来存放单元测试文件，假如有一个 Python 文件名是 greetings.py 那单元测试的文件名就是 test_greetings.py，通常大家都用 pytest 来进行单元测试，可以查询 pytest 文件命名规范。")]),t._v(" "),a("h2",{attrs:{id:"_3、创建不同的内容目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、创建不同的内容目录"}},[t._v("#")]),t._v(" 3、创建不同的内容目录")]),t._v(" "),a("p",[t._v("这个是灵活的，按个人风格来，总体上来说，以英文命名，体现架构层次，可以参照 Django 里面的 models,views,utils,app 等。")]),t._v(" "),a("p",[t._v("在一个目录中放入 "),a("strong",[t._v("init")]),t._v(".py，表示这个目录是一个包，可以被导入来使用。")]),t._v(" "),a("h2",{attrs:{id:"_4、设计文档字符串及类型提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、设计文档字符串及类型提示"}},[t._v("#")]),t._v(" 4、设计文档字符串及类型提示")]),t._v(" "),a("p",[t._v("文档字符串及类型提示，都是为了方便他人或自己来阅读和调用代码。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h39pds1hs2j212w0fa3zc.jpg",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h39pe37816j20z60jkmyq.jpg",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24egy1h39peapylxj20na06gq33.jpg",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_5、使用-git、github-进行版本管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、使用-git、github-进行版本管理"}},[t._v("#")]),t._v(" 5、使用 Git、GitHub 进行版本管理")]),t._v(" "),a("p",[t._v("如果与其他人一起工作，Git GitHub 对于进行版本管理、代码审查、避免合并冲突是必不可少的。即使是自己独立编码，Git 和 GitHub 也是必备的版本控制工具。")]),t._v(" "),a("h2",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),a("p",[t._v("上面一些步骤在 Python 老司机看来比较繁琐，那么你可以使用 poetry 这个脚手架工具，自动为你创建好目录结构，管理虚拟环境、依赖、构建、运行等快捷服务。如果觉得有帮助，还请点个在看支持一下，感谢老铁。")])])}),[],!1,null,null,null);s.default=r.exports}}]);