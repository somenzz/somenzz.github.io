(window.webpackJsonp=window.webpackJsonp||[]).push([[261],{831:function(s,a,n){"use strict";n.r(a);var t=n(7),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"什么是-nameko"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是-nameko"}},[s._v("#")]),s._v(" 什么是 Nameko？")]),s._v(" "),n("p",[s._v("Nameko 是一个用于 Python 的微服务框架，让服务开发人员可以专注于应用程序的逻辑。")]),s._v(" "),n("p",[s._v("它支持")]),s._v(" "),n("ul",[n("li",[s._v("RPC over AMQP")]),s._v(" "),n("li",[s._v("AMQP上的异步事件")])]),s._v(" "),n("h2",{attrs:{id:"为什么是-nameko"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-nameko"}},[s._v("#")]),s._v(" 为什么是 Nameko？")]),s._v(" "),n("p",[s._v("Nameko 能够构建一个服务，该服务可以响应 RPC 消息、在某些操作上调度事件以及侦听来自其他服务的事件。 它还可以为无法使用 AMQP 的客户端提供 HTTP 接口。")]),s._v(" "),n("p",[s._v("先写一个基本的 Nameko 服务，来看看它的功能。")]),s._v(" "),n("h2",{attrs:{id:"写个-hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写个-hello-world"}},[s._v("#")]),s._v(" 写个 Hello World")]),s._v(" "),n("p",[s._v("要运行 Nameko，我们需要 RabbitMQ 作为 Nameko 服务之间的通信，启动 RabbitMQ 容器：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("docker run -p "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5672")]),s._v(":5672 — "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("hostname")]),s._v(" nameko-rabbitmq rabbitmq:3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("然后安装 nameko：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("pip "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" nameko\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("接下来编写一个 Nameko 服务，这个服务只是一个 Python 类。该类在其方法中封装逻辑，并将任何依赖项声明为属性。")]),s._v(" "),n("p",[s._v("创建一个名为 Service.py 的文件，其中包含以下内容：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nameko"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rpc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" rpc\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"service"')]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@rpc")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("receive_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"Event Received: ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("如果已经运行了 RabbitMQ，只需运行 "),n("code",[s._v("nameko run Service")]),s._v(" 就可以启动服务。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24ely1h3pvavzolpj20se03kjrn.jpg",alt:""}})]),s._v(" "),n("p",[s._v("Nameko 实现了自动服务发现，这意味着当通过 AMQP 调用 RPC 方法时，Nameko将尝试自行找到相应的 RabbitMQ 服务。")]),s._v(" "),n("p",[s._v("要测试我们的服务，可以在另一个终端上运行 "),n("code",[s._v("nameko shell")]),s._v("，然后就可以调用 RPC 服务了：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24ely1h3pvca4gvij21340aowg4.jpg",alt:""}})]),s._v(" "),n("p",[s._v("当调用 RPC 入口点时，会创建一个 Nameko worker。 worker 只是服务类的一个无状态实例，这使得它本质上是线程安全的。 默认情况下，worker 的数量最大为 10。")]),s._v(" "),n("p",[s._v("如果 worker 数量设置为1，那么一次只会执行 1 个 worker，它将表现为常规队列。")]),s._v(" "),n("h2",{attrs:{id:"如何让一个-nameko-服务调用另一个-nameko-服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何让一个-nameko-服务调用另一个-nameko-服务"}},[s._v("#")]),s._v(" 如何让一个 Nameko 服务调用另一个 Nameko 服务？")]),s._v(" "),n("p",[s._v("为了从一个 Nameko 服务与另一个服务进行通信，Nameko 提供了一个 RpcProxy，我们可以这样用：")]),s._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nameko"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rpc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" rpc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" RpcProxy\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SenderService")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sender_service"')]),s._v("\n    receiver_service_proxy "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" RpcProxy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"receiver_service"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@rpc")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("send_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("receiver_service_proxy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("receive_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'message'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello World!!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReceiverService")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"receiver_service"')]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@rpc")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("receive_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"Event Received: ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("以上内容保存为 Service2.py，然后执行"),n("code",[s._v("nameko run Service2")]),s._v("，就可以在之前的 nameko shell 中进行测试了：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://tva1.sinaimg.cn/large/e6c9d24ely1h3pvw4p16vj213u0bcq47.jpg",alt:""}})]),s._v(" "),n("h2",{attrs:{id:"如何让非-nameko-服务调用-nameko-服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何让非-nameko-服务调用-nameko-服务"}},[s._v("#")]),s._v(" 如何让非 Nameko 服务调用 Nameko 服务？")]),s._v(" "),n("p",[s._v("在某些情况下，我们需要从非 Nameko 服务（如 API 服务或 cron 作业）调用 Nameko 服务，那就可以这样做：")]),s._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nameko"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("standalone"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rpc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" ClusterRpcProxy\n\nAMQP_URI "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pyamqp://user:paswword@hostname"')]),s._v("\n\nconfig "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'AMQP_URI'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" AMQP_URI\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" ClusterRpcProxy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("config"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" cluster_rpc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    cluster_rpc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("service"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("receive_event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'message'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Hello World!!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"并发性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发性"}},[s._v("#")]),s._v(" 并发性")]),s._v(" "),n("p",[s._v("Nameko 构建在 eventlet 库之上，该库通过 greenthreads 提供并发性，姑且叫它绿色线程。")]),s._v(" "),n("p",[s._v("绿色线程与操作系统线程不同，它们相互协作让步，而不是被操作系统抢先调度。 当服务 I/O 繁重时，绿色线程是非常高效的。")]),s._v(" "),n("p",[s._v("一个绿色线程只有在忙于 I/O 时才会产生控制权——给另一个绿色线程一个执行的机会，从而允许服务使用共享数据结构，而无需使用锁和其他同步机制。")]),s._v(" "),n("p",[s._v("让我们修改上面的代码测试下 Nameko 的并发：")]),s._v(" "),n("div",{staticClass:"language-py line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-py"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" time "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" sleep\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nameko"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rpc "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" rpc\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Service")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"service"')]),s._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@rpc")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("receive_event")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        sleep"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"Event Received: ')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"')])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[s._v("其实就加了一个 time.sleep(5)，time.sleep 是一个阻塞调用，当使用 nameko run 运行服务时，nameko 将自动将阻塞调切换到非阻塞调用，使其异步。")]),s._v(" "),n("p",[s._v("现在，单个 RPC 调用的响应时间为 5 秒。如果我们一次调用 10 个调用到同一个 RPC，需要多长时间才能得到所有的响应？")]),s._v(" "),n("p",[s._v("让我们在 nameko shell 中运行以下代码：")]),s._v(" "),n("p",[s._v("ef time_concurrent_invocations（）：\nstart_time = time.perf_counter()\n回复 = []\nnum_concurrent_calls = 10\nfor i in range(num_concurrent_calls):\nresponse = n.rpc.service.receive_event({'message': f'Worker {i+1}'})\n回复.附录（回复）")]),s._v(" "),n("p",[s._v("回应：\nprint（response.result）")]),s._v(" "),n("p",[s._v("end_time = time.perf_counter()")]),s._v(" "),n("p",[s._v("print(f'总时间：{round(end_time-start_time, 3)}')")]),s._v(" "),n("p",[s._v("time_concurrent_invocations（）\n这个例子在大约五秒钟内运行。每个工人将被阻止等待睡眠呼叫结束，但这不会阻止另一名工人开始，隐含地屈服于行动。\n如果您在上面的片段中更改num_concurrent_calls = 20，则执行将在10秒内完成。\n异步酒吧-Sub\n假设，我们现在必须执行一项异步任务，例如在云端发送通知或上传文件：\n从nameko.events导入EventDispatcher，event_handler\n从 nameko.rpc 导入 rpc")]),s._v(" "),n("p",[s._v("类MessageService：")]),s._v(" "),n("p",[s._v('name = "message_service"')]),s._v(" "),n("p",[s._v("dispatch = EventDispatcher（）")]),s._v(" "),n("p",[s._v('def time_consuming_function（self，有效载荷）：\nself.dispatch("heavy_payload_event", payload)')]),s._v(" "),n("p",[s._v("@rpc\ndef receive_message（self，event）：")]),s._v(" "),n("p",[s._v("如果事件['有效载荷']：\nself.time_consuming_function(event['payload'])")]),s._v(" "),n("p",[s._v("print(f'Message Received: {event['message']}')")]),s._v(" "),n("p",[s._v('类TimeConsumingService：\nname = "time_consuming_service"')]),s._v(" "),n("p",[s._v('@event_handler("message_service", "heavy_payload_event")\ndef time_consuming_event_handler（self，有效载荷）：\n传球\n当receive_message处理具有有效负载的事件时，它调用time_consuming_function，该函数使用EventDispatcher通过在单独的绿色线程中调用time_consuming_event_handler来异步处理有效负载。这里的调用者线程不会等待事件处理程序返回响应，从而允许调用者线程更快地完成执行并接受进一步的请求。\n可扩展的\n我们只使用一台服务器，并运行了一个RabbitMQ实例。在生产环境中，您将希望任意增加运行服务接收太多呼叫的节点数量。\n为了模拟服务扩展，让我们从并发部分重新访问我们的服务。打开另一个终端并像以前一样运行服务，使用nameko run Service。这将启动另一个服务实例，有可能再运行十名工人。现在，尝试使用num_concurrent_calls = 20再次运行该片段。现在应该需要五秒钟才能再次运行。当有多个服务实例运行时，Nameko将在可用实例中循环RPC请求。\n事实上，您可以配置这些服务，使其可以在完全不同的机器上运行并独立扩展。您所要做的就是将这些服务指向同一个RabbitMQ经纪人。\n使用代理URI创建一个配置文件：')]),s._v(" "),n("h1",{attrs:{id:"config-yaml"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#config-yaml"}},[s._v("#")]),s._v(" config.yaml")]),s._v(" "),n("p",[s._v("AMQP_URI：amqp://"),n("rabbitmq-ip",[s._v(":5672/\n使用以下方式在不同的机器上运行这些服务：\n$ nameko run <nameko_service> --config config.yaml\n断层\nNameko具有高度鲁棒性和容错性，因此，在服务集群中的一个或多个节点发生故障时，它将继续正常运行，直到至少一个健康节点继续正常工作。\n尝试运行服务的3个实例，并使用num_concurrent_calls = 50执行测试片段。一旦您执行测试片段，请杀死Service中的1或2个实例。错过的消息将被重新路由到健康节点，从而避免消息丢失。\n这种行为是由于消息在工人执行成功完成后被ack化，如果连接在交付后但在确认之前丢失，RabbitMQ将收回并重新交付消息。\n如果RabbitMQ服务器死机，队列中还剩下消息，会发生什么？\nNameko默认为通过AMQP为RPC创建的队列设置delivery_mode=PERSISTENT。这告诉RabbitMQ将消息保存到磁盘。\n然而，RabbitMQ接受消息的时间很短，但尚未保存它，这意味着持久性保证并不强。\n为了解决这个问题，Nameko默认使用发布者确认。确认会受到性能处罚，但保证消息不会丢失。\n结论\nNameko旨在帮助您使用微服务构建系统，并从单个服务的单个实例扩展到具有许多不同服务实例的集群。\n要了解有关Nameko的更多信息，请查看Nameko文档并加入Nameko Discourse。")])],1)])}),[],!1,null,null,null);a.default=e.exports}}]);